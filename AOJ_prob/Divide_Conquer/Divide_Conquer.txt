분할정복

주어진 문제를 둘 이상의 부분 문제로 나눈 뒤 각 문제에 대한 답을 재귀호출을 
이용하여 계산하고, 각 부분 문제의 답으로부터 전체 문제의 답을 도출

문제를 분할할때 거의 비슷한 크기의 부분 문제로 분할


1. 문제를 더 작은 문제로 분할(divide)
2. 각 문제에 대한 구한 답을 원래 문제에 대한 답으로 병합(merge)
3. 더이상 답을 분할하지 않고 바로 풀 수 있는 매우 작은 문제(base case)

QUADTREE(실패-성공)
책: 압출을 다 풀지 않고 뒤집어야한다. 전체가 한 가지 색이 아닌 경우 재귀 호출을 통해서 4부분을
각가 상하 반전한 뒤 병합해야한다. 즉, 전체를 4부분으로 나누고 각 부분을 상하로 뒤집고 이들을
합쳐야한다. 
그림을 string stl을 사용하여 표현했다. c++에서 string을 다루는 법을 연습해야겠다. 

나: 압축을 풀면서 부분을 뒤집어 가면 전체를 상하 반전한 것과 같다는 사실을 알았지만,
분할정복을 어떻게 적용해하는지 감이 오지 않았다. 또한 그림을 문자배열로 표현하여
다루기 어려웠다. 분할정복을 퀵소트나 merge sort처럼 단순히 이분법으로만 접근
했었는데, 이 문제는 4개의 부분 문제로 나눴어야했다. 즉 각 부분 문제의 크기가 거의
비슷하면 된다. 책에서는 string 반복자를 인자로 넘겨주었지만, 나는 전역변수로 사용했다. 


FENCE(실패-성공)
책: 가운데를 걸치면서 정답이 나오는 경우의 코드를 완벽히 이해하자. 인덱스와 조건문을 잘 이용해야한다. 
"if(high < e && (low == s || fence[low -1] < fence[high+1]))"

나: 완벽하게 털린 문제다..분할 정복이란 카테고리를 짐작하고 시작했음에도 부분문제를 어떻게 나누어야 할 지
도저히 감이 오지 않았다. 책을 잠깐 봐서 정답의 경우를 봤다. 이 문제에서 정답이 가능한 경우는 총 3가지이다.
1. 울타리 반쪽의 왼쪽에서 정답이 나오는 경우
2. 울타리 반쪽의 오른쪽에서 정답이 나오는 경우
3. 울타리 가운데를 포함하면서(걸치면서) 나오는 경우
이것을 보고 풀수 있겠다 싶어서 1, 2번은 단순한 재귀호출로 쉽게 구할 수 있었으나, 3번이 문제였다.
울타리 가운데를 포함하는 경우에서 어떤 모양이 최대 넓이일지 알 방법이 떠오르지 않았다.
가운데를 무조건 포함해야하니 가운데에서 시작해서 양쪽으로 인덱스를 확장해가면서 최대 넓이를 구하면
될 것이란 생각을 했지만 구현에 실패했다. 결국 책의 코드를 참조했다. 
3번의 경우 가운데에서 시작해서 양쪽으로 인덱스를 확장하는 방식이 맞다.
여기서 low, high인덱스가 확장해 나아가는 인덱스라고 하면 low-1, high+1의 울타리 높이 중 작은 높이를
넓이를 구하는 직사각형의 세로로 두고 high-low+1을 가로로 두어 넓이를 구한뒤 높이가
높은 쪽으로 확장해 나가는 방식이다. 각 단계에서 구한 넓이를 최대인 상태로 유지하면 그것이 가운데를 걸치면서 
가장 넓은 직사각형이 나온다. 

