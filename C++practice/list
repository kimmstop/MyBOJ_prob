#include <iostream>
#include <list>


using namespace std;

int main()
{	
	list<int> l1, l2;
	list<int>::iterator iter;
	l1.push_back(10);
	l1.push_front(111);
	iter = l1.begin();
	cout << *iter << endl;
	iter = l1.end();
	cout << *iter << endl; // 인덱스로 생각하면 end는 마지막 원소의 다음 원소-> 참조할 수 없는 곳을 참조함
	iter--;
	cout << *iter << endl;

	l2.push_back(100);
	l2.push_back(3);
	l2.push_back(99);
	iter = l2.begin();
	iter = l2.insert(iter,1); /* 넣고 난뒤에 iter는 100이 있는 곳을 가리키고 있다. 
								 insert 함수자체가 넣은 값의 시작 주소를 나타내는 iterator를 반환한다. */	
	cout << l2.front() << endl; // 1
	cout << *iter << endl; // 100

	iter = l2.erase(l2.begin()); //1 -> 100 에서 1을 지우고 뒤 원소인 100을 iter가 가리킨다. 
	cout << *iter << endl; // 100

//	iter = l2.erase(l2.end()); // 따라서 이 문장은 세그폴트가 난다.
//	cout << *iter << endl; 
	

	iter = l2.end(); // 배열이 아니라 연결리스트이다. 여기서 다음 원소의 주소를 가리킨다고는 하지만 실제로는 다음 원소의 주소가 어디가될지는 모른다. 따라서 insert로 iterator를 지정해주지 않고 push_back으로만 넣으면 iter 넣은 값이 아닌 다른 곳을 가리키고 있다.
	cout << *iter << endl; // 이상한 곳
	l2.push_back(8);
	cout << *iter << endl;	// 이상한 곳
	iter--;
	cout << * iter << endl; // 근데 이건 왜 8이지


}
